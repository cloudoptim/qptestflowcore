// <auto-generated />
using System;
using System.Collections;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QPCore.Data;

namespace QPCore.Migrations
{
    [DbContext(typeof(QPContext))]
    [Migration("20210523150124_update parent app feature with zero")]
    partial class updateparentappfeaturewithzero
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

            modelBuilder.HasSequence("applicationfeaturesseq");

            modelBuilder.HasSequence("batchseq");

            modelBuilder.HasSequence("cmdseq");

            modelBuilder.HasSequence("configkeyseq");

            modelBuilder.HasSequence("configseq");

            modelBuilder.HasSequence("localrunseq");

            modelBuilder.HasSequence("refreshtokenseq")
                .HasMin(0L);

            modelBuilder.HasSequence("runcolseq");

            modelBuilder.HasSequence("runconfigseq");

            modelBuilder.HasSequence("runrowseq");

            modelBuilder.HasSequence("runseq");

            modelBuilder.HasSequence("runstepseq");

            modelBuilder.HasSequence("runtestseq");

            modelBuilder.HasSequence("stepcolseq");

            modelBuilder.HasSequence("steprowseq");

            modelBuilder.HasSequence("stepseq");

            modelBuilder.HasSequence("test");

            modelBuilder.HasSequence("tfcolseq");

            modelBuilder.HasSequence("tfrowseq");

            modelBuilder.HasSequence("tfseq");

            modelBuilder.HasSequence("tfstepseq");

            modelBuilder.HasSequence("webelement");

            modelBuilder.HasSequence("webelementgroup")
                .HasMin(0L);

            modelBuilder.HasSequence("webelementpage");

            modelBuilder.HasSequence("webmodelgroupseq");

            modelBuilder.HasSequence("webmodelpropseq")
                .HasMin(0L);

            modelBuilder.HasSequence("webmodelseq")
                .HasMin(0L);

            modelBuilder.Entity("QPCore.Data.Enitites.AppUser", b =>
                {
                    b.Property<int>("Userclientid")
                        .HasColumnType("integer")
                        .HasColumnName("userclientid");

                    b.Property<int>("Client")
                        .HasColumnType("integer")
                        .HasColumnName("client");

                    b.Property<BitArray>("Enabled")
                        .IsRequired()
                        .HasColumnType("bit(1)")
                        .HasColumnName("enabled");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Userclientid")
                        .HasName("userclientassoc");

                    b.HasIndex("Client");

                    b.HasIndex("Userid");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.Application", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_id")
                        .HasIdentityOptions(1L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("application_id")
                        .HasIdentityOptions(1L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("application_name");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OrgId")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("ClientId")
                        .HasName("clientId");

                    b.HasIndex("OrgId");

                    b.HasIndex(new[] { "ApplicationId" }, "ix_application_id")
                        .IsUnique();

                    b.ToTable("Application");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.ApplicationFeature", b =>
                {
                    b.Property<int>("AppFeatureId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("FeatureName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentFeatureId")
                        .HasColumnType("integer");

                    b.HasKey("AppFeatureId")
                        .HasName("ApplicationFeatures_pkey");

                    b.ToTable("ApplicationFeatures");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.ConfigTestFlowConfig", b =>
                {
                    b.Property<int>("ConfigId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSystemDefined")
                        .HasColumnType("boolean");

                    b.HasKey("ConfigId")
                        .HasName("TestFlowConfig_pkey");

                    b.HasIndex("ClientId");

                    b.ToTable("Config.TestFlowConfig");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.ConfigTestFlowConfigValue", b =>
                {
                    b.Property<int>("PairId")
                        .HasColumnType("integer");

                    b.Property<int?>("ConfigId")
                        .HasColumnType("integer");

                    b.Property<string>("KeyName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("KeyValue")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("PairId")
                        .HasName("Config.TestFlowConfigValues_pkey");

                    b.HasIndex("ConfigId");

                    b.ToTable("Config.TestFlowConfigValues");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.JStepresult", b =>
                {
                    b.Property<string>("Georesult")
                        .HasColumnType("json")
                        .HasColumnName("georesult");

                    b.ToTable("j_stepresult");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.OrgUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user-id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created-by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created-date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first-name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is-active");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last-name");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("login-name");

                    b.Property<int>("OrgId")
                        .HasColumnType("integer")
                        .HasColumnName("org-id");

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("password-reset");

                    b.Property<string>("ResetToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("reset-token");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reset-token-expires");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated-by");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated-date");

                    b.Property<BitArray>("UseWindowsAuth")
                        .HasColumnType("bit(1)")
                        .HasColumnName("use-windows-auth");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("verification-token");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("verified");

                    b.HasKey("UserId")
                        .HasName("orguser");

                    b.HasIndex("OrgId");

                    b.ToTable("OrgUsers");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.Organization", b =>
                {
                    b.Property<int>("OrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("orgid")
                        .HasIdentityOptions(1L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("OrgName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("OrgId")
                        .HasName("orgid");

                    b.ToTable("Organization");

                    b.HasData(
                        new
                        {
                            OrgId = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2021, 5, 23, 22, 1, 23, 782, DateTimeKind.Local).AddTicks(810),
                            OrgName = "Default Organization"
                        });
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial")
                        .HasColumnName("refreshtokenid")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("createdbyip");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires");

                    b.Property<int>("OrgUserId")
                        .HasColumnType("integer")
                        .HasColumnName("orguserid");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("replacedbytoken");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("revoked");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("revokedbyip");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("token");

                    b.HasKey("RefreshTokenId")
                        .HasName("pr_refreshtoken_refreshtokenid");

                    b.HasIndex("OrgUserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("isdefault");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("issystem");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rolecode");

                    b.Property<string>("Rolename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rolename");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            IsActive = true,
                            IsDefault = false,
                            IsSystem = true,
                            RoleCode = "ADMIN",
                            Rolename = "Administrator"
                        },
                        new
                        {
                            RoleId = 2,
                            IsActive = true,
                            IsDefault = true,
                            IsSystem = true,
                            RoleCode = "USER",
                            Rolename = "User"
                        });
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunConfiguration", b =>
                {
                    b.Property<int>("RunCofigId")
                        .HasColumnType("integer");

                    b.Property<int>("TestRunConfigId")
                        .HasColumnType("integer");

                    b.Property<string>("TestRunConfigName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TestRunKeyName")
                        .HasColumnType("character varying");

                    b.Property<string>("TestRunKeyValue")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("RunCofigId")
                        .HasName("Run.Configuration_pkey");

                    b.ToTable("Run.Configuration");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunLocalResult", b =>
                {
                    b.Property<int?>("Clientid")
                        .HasColumnType("integer")
                        .HasColumnName("clientid");

                    b.Property<int?>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("TestResults")
                        .HasColumnType("json");

                    b.ToTable("Run.LocalResults");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestBatch", b =>
                {
                    b.Property<int>("RunBatchId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BatchEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BatchOutcome")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("BatchStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("RunBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("RunBatchId")
                        .HasName("Run.TestBatch_pkey");

                    b.HasIndex("ClientId");

                    b.ToTable("Run.TestBatch");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestCase", b =>
                {
                    b.Property<int>("RunTestCaseId")
                        .HasColumnType("integer");

                    b.Property<int?>("ConfigId")
                        .HasColumnType("integer")
                        .HasColumnName("configId");

                    b.Property<int?>("TestCaseId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TestCaseRunEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TestCaseRunErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TestCaseRunStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TestCaseRunStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("TestRunId")
                        .HasColumnType("integer");

                    b.Property<string>("TestcaseName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("RunTestCaseId");

                    b.HasIndex("TestRunId");

                    b.ToTable("Run.TestCase");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestColumn", b =>
                {
                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int?>("ColumnIndex")
                        .HasColumnType("integer");

                    b.Property<string>("ColumnName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("StepId")
                        .HasColumnType("integer");

                    b.HasKey("ColumnId")
                        .HasName("runtestcolumn");

                    b.HasIndex("StepId");

                    b.ToTable("Run.TestColumn");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestRow", b =>
                {
                    b.Property<int>("RowId")
                        .HasColumnType("integer");

                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("integer");

                    b.Property<string>("RowValue")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("RowId")
                        .HasName("Run.TestRow_pkey");

                    b.HasIndex("ColumnId");

                    b.ToTable("Run.TestRow");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestRun", b =>
                {
                    b.Property<int>("RunId")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Batchid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RunEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("RunStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RunStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RuntStdouput")
                        .HasColumnType("text");

                    b.HasKey("RunId")
                        .HasName("Run.TestRun_pkey");

                    b.HasIndex("Batchid");

                    b.ToTable("Run.TestRun");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestStep", b =>
                {
                    b.Property<int?>("RunStepId")
                        .HasColumnType("integer");

                    b.Property<int?>("RunTestCaseId")
                        .HasColumnType("integer");

                    b.Property<string>("StepStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("TestStepEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TestStepErrorMessage")
                        .HasColumnType("text");

                    b.Property<int>("TestStepId")
                        .HasColumnType("integer");

                    b.Property<string>("TestStepName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("TestStepStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TextMetaData")
                        .HasColumnType("text");

                    b.ToTable("Run.TestSteps");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.StepGlossary", b =>
                {
                    b.Property<int>("StepId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayStepName")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<int?>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StepDataType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StepDescription")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<string>("StepSource")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("StepType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("StepId")
                        .HasName("StepGlossaryStepid");

                    b.HasIndex("ClientId");

                    b.ToTable("StepGlossary");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.StepGlossaryAssoc", b =>
                {
                    b.Property<int>("StepAssocId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentStepId")
                        .HasColumnType("integer");

                    b.Property<int>("Stepid")
                        .HasColumnType("integer");

                    b.HasKey("StepAssocId")
                        .HasName("StepGlossaeryAssoc");

                    b.ToTable("StepGlossaryAssoc");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.StepGlossaryColumn", b =>
                {
                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int?>("ColumnIndex")
                        .HasColumnType("integer");

                    b.Property<string>("ColumnName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("StepId")
                        .HasColumnType("integer");

                    b.HasKey("ColumnId")
                        .HasName("StepGlossColumn");

                    b.HasIndex("StepId");

                    b.ToTable("StepGlossaryColumn");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.StepGlossaryFeatureAssoc", b =>
                {
                    b.Property<int>("FeatureAssocId")
                        .HasColumnType("integer");

                    b.Property<int>("Featureid")
                        .HasColumnType("integer");

                    b.Property<BitArray>("IsActive")
                        .HasColumnType("bit(1)");

                    b.Property<int>("StepId")
                        .HasColumnType("integer");

                    b.HasKey("FeatureAssocId")
                        .HasName("StepFeaureAssoc");

                    b.HasIndex("Featureid");

                    b.HasIndex("StepId");

                    b.ToTable("StepGlossaryFeatureAssoc");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.StepGlossaryRow", b =>
                {
                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int?>("RowId")
                        .HasColumnType("integer");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("integer");

                    b.Property<string>("RowValue")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.ToTable("StepGlossaryRow");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlow", b =>
                {
                    b.Property<int>("TestFlowId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AssignedDatetTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Islocked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("LockedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("SourceFeatureId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceFeatureName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("TestFlowDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("TestFlowName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("TestFlowStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TestFlowId");

                    b.HasIndex("ClientId");

                    b.ToTable("TestFlow");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasIdentityOptions(100L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CategoryId")
                        .HasName("TestFlowCategory_pkey");

                    b.HasIndex("ClientId");

                    b.ToTable("TestFlowCategory");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowCategoryAssoc", b =>
                {
                    b.Property<int>("TestFlowCatAssocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasIdentityOptions(100L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("TestFlowId")
                        .HasColumnType("integer");

                    b.HasKey("TestFlowCatAssocId")
                        .HasName("TestFlowCategoryAssoc_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TestFlowId");

                    b.ToTable("TestFlowCategoryAssoc");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowColumn", b =>
                {
                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int?>("ColumnIndex")
                        .HasColumnType("integer");

                    b.Property<string>("ColumnName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("TestFlowStepId")
                        .HasColumnType("integer");

                    b.HasKey("ColumnId")
                        .HasName("TestFlowColumn_pk");

                    b.HasIndex("TestFlowStepId");

                    b.ToTable("TestFlowColumn");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowRow", b =>
                {
                    b.Property<int>("RowId")
                        .HasColumnType("integer");

                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("integer");

                    b.Property<string>("RowValue")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("RowId")
                        .HasName("TestFlowRow_pkey");

                    b.ToTable("TestFlowRow");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowStep", b =>
                {
                    b.Property<int>("TestFlowStepId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ResourceType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StepGlossaryStepId")
                        .HasColumnType("integer");

                    b.Property<int>("TestFlowId")
                        .HasColumnType("integer");

                    b.Property<string>("TestFlowStepDataType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TestFlowStepDescription")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<string>("TestFlowStepName")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<string>("TestFlowStepSource")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("TestFlowStepType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TestFlowStepId");

                    b.HasIndex("TestFlowId");

                    b.ToTable("TestFlowStep");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("testplan_id")
                        .HasIdentityOptions(1L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AssignTo")
                        .HasColumnType("integer")
                        .HasColumnName("assign_to");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_testplan_testplan_id");

                    b.HasIndex("AssignTo");

                    b.HasIndex("ParentId");

                    b.ToTable("TestPlan");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestPlanTestCaseAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("testplan_testcase_id")
                        .HasIdentityOptions(1L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("integer")
                        .HasColumnName("testcase_id");

                    b.Property<int>("TestPlanId")
                        .HasColumnType("integer")
                        .HasColumnName("testplan_id");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_testplantestcaseassociation_id");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestPlanId");

                    b.ToTable("TestPlanTestCaseAssociation");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("clientroleassoc")
                        .HasIdentityOptions(100L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserRoleId")
                        .HasName("pk_userrole_clientroleassoc");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebCommand", b =>
                {
                    b.Property<int>("CommandId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("CommandDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CommandSource")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CommandType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("CommandId")
                        .HasName("CommandId");

                    b.HasIndex("ClientId");

                    b.ToTable("WebCommands");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebElement", b =>
                {
                    b.Property<int>("Elementid")
                        .HasColumnType("integer")
                        .HasColumnName("elementid");

                    b.Property<string>("Applicationsection")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("applicationsection");

                    b.Property<string>("Command")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("command");

                    b.Property<string>("Elementaliasname")
                        .HasMaxLength(550)
                        .HasColumnType("character varying(550)")
                        .HasColumnName("elementaliasname");

                    b.Property<int?>("Elementparentid")
                        .HasColumnType("integer")
                        .HasColumnName("elementparentid");

                    b.Property<string>("Elementtype")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("elementtype");

                    b.Property<string>("Framenavigation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("framenavigation");

                    b.Property<string>("Itype")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("itype");

                    b.Property<string>("Ivalue")
                        .HasMaxLength(550)
                        .HasColumnType("character varying(550)")
                        .HasColumnName("ivalue");

                    b.Property<string>("Locationpath")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("locationpath");

                    b.Property<int>("Pageid")
                        .HasColumnType("integer")
                        .HasColumnName("pageid");

                    b.Property<string>("Screenshot")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)")
                        .HasColumnName("screenshot");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Elementid")
                        .HasName("elementid");

                    b.ToTable("WebElement");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebModel", b =>
                {
                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ModelId")
                        .HasName("modelid");

                    b.ToTable("WebModel");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebModelGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.HasKey("GroupId")
                        .HasName("Web_Model_Group_pkey");

                    b.HasIndex("ModelId");

                    b.ToTable("WebModelGroup");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebModelProp", b =>
                {
                    b.Property<int>("PropId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("PropLength")
                        .HasColumnType("integer");

                    b.Property<string>("PropName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PropType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ValidationExpression")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("WebElementId")
                        .HasColumnType("integer");

                    b.HasKey("PropId")
                        .HasName("ModelPropId");

                    b.HasIndex("GroupId");

                    b.ToTable("WebModelProp");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebPage", b =>
                {
                    b.Property<int>("Pageid")
                        .HasColumnType("integer")
                        .HasColumnName("pageid");

                    b.Property<string>("Createdby")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("Createddatetime")
                        .HasColumnType("date")
                        .HasColumnName("createddatetime");

                    b.Property<int>("Groupid")
                        .HasColumnType("integer")
                        .HasColumnName("groupid");

                    b.Property<BitArray>("Isactive")
                        .HasColumnType("bit(1)")
                        .HasColumnName("isactive");

                    b.Property<string>("Pagename")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("pagename");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updatedBy");

                    b.Property<DateTime?>("Updateddatetime")
                        .HasColumnType("date")
                        .HasColumnName("updateddatetime");

                    b.HasKey("Pageid")
                        .HasName("webpageid");

                    b.ToTable("WebPage");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebPageGroup", b =>
                {
                    b.Property<string>("Createdby")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("Createddatetime")
                        .HasColumnType("date")
                        .HasColumnName("createddatetime");

                    b.Property<string>("Groupname")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("groupname");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("Updateddatetime")
                        .HasColumnType("date")
                        .HasColumnName("updateddatetime");

                    b.Property<int?>("Versionid")
                        .HasColumnType("integer")
                        .HasColumnName("versionid");

                    b.ToTable("WebPageGroup");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.AppUser", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.Application", "Application")
                        .WithMany("AppUsers")
                        .HasForeignKey("Client")
                        .HasConstraintName("fk_application_appuser_client")
                        .IsRequired();

                    b.HasOne("QPCore.Data.Enitites.OrgUser", "OrgUser")
                        .WithMany("AppUsers")
                        .HasForeignKey("Userid")
                        .HasConstraintName("fk_orguser_appuser_userid")
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("OrgUser");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.Application", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.Organization", "Org")
                        .WithMany("Applications")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("AppOrgId")
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.ConfigTestFlowConfig", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.Application", "Client")
                        .WithMany("ConfigTestFlowConfigs")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("TestConfig_Client")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.ConfigTestFlowConfigValue", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.ConfigTestFlowConfig", "Config")
                        .WithMany("ConfigTestFlowConfigValues")
                        .HasForeignKey("ConfigId")
                        .HasConstraintName("ConfigKeyvalue");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.OrgUser", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.Organization", "Org")
                        .WithMany("OrgUsers")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("orguser_fk")
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RefreshToken", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.OrgUser", "OrgUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("OrgUserId")
                        .HasConstraintName("fk_orgusers_refreshtoken_orguserid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrgUser");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestBatch", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.Application", "Client")
                        .WithMany("RunTestBatches")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("RunbatchApplicationId")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestCase", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.RunTestRun", "TestRun")
                        .WithMany("RunTestCases")
                        .HasForeignKey("TestRunId")
                        .HasConstraintName("Run.TestCase_TestRunId_fkey");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestColumn", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.RunTestCase", "Step")
                        .WithMany("RunTestColumns")
                        .HasForeignKey("StepId")
                        .HasConstraintName("Run.TestColumn_StepId_fkey");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestRow", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.RunTestColumn", "Column")
                        .WithMany("RunTestRows")
                        .HasForeignKey("ColumnId")
                        .HasConstraintName("Run.TestRow_ColumnId_fkey")
                        .IsRequired();

                    b.Navigation("Column");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestRun", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.RunTestBatch", "Batch")
                        .WithMany("RunTestRuns")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("Run.TestRun_BatchRunId_fkey")
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.StepGlossary", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.Application", "Client")
                        .WithMany("StepGlossaries")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("StepGlossaryClientAssoc")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.StepGlossaryColumn", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.StepGlossary", "Step")
                        .WithMany("StepGlossaryColumns")
                        .HasForeignKey("StepId")
                        .HasConstraintName("StepColumGlossAssoc");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.StepGlossaryFeatureAssoc", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.ApplicationFeature", "Feature")
                        .WithMany("StepGlossaryFeatureAssocs")
                        .HasForeignKey("Featureid")
                        .HasConstraintName("FeaureAssoc")
                        .IsRequired();

                    b.HasOne("QPCore.Data.Enitites.StepGlossary", "Step")
                        .WithMany("StepGlossaryFeatureAssocs")
                        .HasForeignKey("StepId")
                        .HasConstraintName("StepGlossaryAssoc")
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlow", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.Application", "Client")
                        .WithMany("TestFlows")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("TestFlowClient")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowCategory", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.Application", "Client")
                        .WithMany("TestFlowCategories")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("TestFlowCategoryClient_fk")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowCategoryAssoc", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.TestFlowCategory", "Category")
                        .WithMany("TestFlowCategoryAssocs")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("TestFlowCategoryAssoc_Cat_fk")
                        .IsRequired();

                    b.HasOne("QPCore.Data.Enitites.TestFlow", "TestFlow")
                        .WithMany("TestFlowCategoryAssocs")
                        .HasForeignKey("TestFlowId")
                        .HasConstraintName("TestFlowCategoryAssoc_Testflow_Fk")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("TestFlow");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowColumn", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.TestFlowStep", "TestFlowStep")
                        .WithMany("TestFlowColumns")
                        .HasForeignKey("TestFlowStepId")
                        .HasConstraintName("TestFlowColumn_fk");

                    b.Navigation("TestFlowStep");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowStep", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.TestFlow", "TestFlow")
                        .WithMany("TestFlowSteps")
                        .HasForeignKey("TestFlowId")
                        .HasConstraintName("TestFLows")
                        .IsRequired();

                    b.Navigation("TestFlow");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestPlan", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.OrgUser", "OrgUser")
                        .WithMany("TestPlans")
                        .HasForeignKey("AssignTo")
                        .HasConstraintName("fk_testplan_orguser_assign_to_user_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("QPCore.Data.Enitites.TestPlan", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_testplan_parent_id_testplan_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("OrgUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestPlanTestCaseAssociation", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.TestFlow", "TestCase")
                        .WithMany("TestPlanTestCaseAssociations")
                        .HasForeignKey("TestCaseId")
                        .HasConstraintName("fk_testflow_testplantestcase_testcase_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("QPCore.Data.Enitites.TestPlan", "TestPlan")
                        .WithMany("TestPlanTestCaseAssociations")
                        .HasForeignKey("TestPlanId")
                        .HasConstraintName("fk_testplan_testcase_testplan_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("TestCase");

                    b.Navigation("TestPlan");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.UserRole", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_userrole_roleid_roleid")
                        .IsRequired();

                    b.HasOne("QPCore.Data.Enitites.OrgUser", "OrgUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_orguser_userrole_userclientid_userid")
                        .IsRequired();

                    b.Navigation("OrgUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebCommand", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.Application", "Client")
                        .WithMany("WebCommands")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("CommandClientId")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebModelGroup", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.WebModel", "Model")
                        .WithMany("WebModelGroups")
                        .HasForeignKey("ModelId")
                        .HasConstraintName("ModelGroup")
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebModelProp", b =>
                {
                    b.HasOne("QPCore.Data.Enitites.WebModelGroup", "Group")
                        .WithMany("WebModelProps")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("ModelGroupProp")
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.Application", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("ConfigTestFlowConfigs");

                    b.Navigation("RunTestBatches");

                    b.Navigation("StepGlossaries");

                    b.Navigation("TestFlowCategories");

                    b.Navigation("TestFlows");

                    b.Navigation("WebCommands");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.ApplicationFeature", b =>
                {
                    b.Navigation("StepGlossaryFeatureAssocs");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.ConfigTestFlowConfig", b =>
                {
                    b.Navigation("ConfigTestFlowConfigValues");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.OrgUser", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("RefreshTokens");

                    b.Navigation("TestPlans");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.Organization", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("OrgUsers");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestBatch", b =>
                {
                    b.Navigation("RunTestRuns");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestCase", b =>
                {
                    b.Navigation("RunTestColumns");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestColumn", b =>
                {
                    b.Navigation("RunTestRows");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.RunTestRun", b =>
                {
                    b.Navigation("RunTestCases");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.StepGlossary", b =>
                {
                    b.Navigation("StepGlossaryColumns");

                    b.Navigation("StepGlossaryFeatureAssocs");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlow", b =>
                {
                    b.Navigation("TestFlowCategoryAssocs");

                    b.Navigation("TestFlowSteps");

                    b.Navigation("TestPlanTestCaseAssociations");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowCategory", b =>
                {
                    b.Navigation("TestFlowCategoryAssocs");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestFlowStep", b =>
                {
                    b.Navigation("TestFlowColumns");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.TestPlan", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("TestPlanTestCaseAssociations");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebModel", b =>
                {
                    b.Navigation("WebModelGroups");
                });

            modelBuilder.Entity("QPCore.Data.Enitites.WebModelGroup", b =>
                {
                    b.Navigation("WebModelProps");
                });
#pragma warning restore 612, 618
        }
    }
}
